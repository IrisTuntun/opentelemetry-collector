---
# create otelcol namespace
apiVersion: v1
kind: Namespace
metadata:
  name: otelcol
  labels:
    name: otelcol

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  namespace: otelcol
  labels:
    app: opentelemetry
    component: otel-collector-conf
data:
  otel-collector-config: |
    receivers:
      prometheus:
        config:
          global:
            scrape_interval: 1m
            scrape_timeout: 10s

          scrape_configs:
          - job_name: 'kubernetes-apiservers'

            # Default to scraping over https. If required, just disable this or change to
            # `http`.
            scheme: https
            
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

            kubernetes_sd_configs:
            - role: endpoints

            # Keep only the default/kubernetes service endpoints for the https port. This
            # will add targets for each API server which Kubernetes adds an endpoint to
            # the default/kubernetes service.
            relabel_configs:
            - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
              action: keep
              regex: default;kubernetes;https

          - job_name: 'kubernetes-cadvisor'

            # Default to scraping over https. If required, just disable this or change to
            # `http`.
            scheme: https
            
            metrics_path: /metrics/cadvisor

            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

            kubernetes_sd_configs:
            - role: node

            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: address
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: metrics_path
                replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor 

          - job_name: 'kubernetes-nodes'

            # Default to scraping over https. If required, just disable this or change to
            # `http`.
            scheme: https

            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

            kubernetes_sd_configs:
            - role: node

            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: address
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: metrics_path
                replacement: /api/v1/nodes/${1}/proxy/metrics

          - job_name: 'kubernetes-pods'

            kubernetes_sd_configs:
            - role: pod

            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

            relabel_configs:
            # Example relabel to scrape only pods that have
            # "prometheus.io/scrape = true" annotation.
            #  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            #    action: keep
            #    regex: true
            #
            # Example relabel to customize metric path based on pod
            # "prometheus.io/metric_path = <metric path>" annotation.
            #  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_metric_path]
            #    action: replace
            #    target_label: __metrics_path__
            #    regex: (.+)
            #
            # Example relabel to scrape only single, desired port for the pod
            # based on pod "prometheus.io/scrape_port = <port>" annotation.
            #  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_scrape_port]
            #    action: replace
            #    regex: ([^:]+)(?::\d+)?;(\d+)
            #    replacement: $1:$2
            #    target_label: __address__
            #
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels: [__meta_kubernetes_namespace]
              target_label: Namespace
            - action: replace
              source_labels: [__meta_kubernetes_pod_name]
              target_label: pod_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_container_name]
              target_label: container_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_controller_name]
              target_label: pod_controller_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_controller_kind]
              target_label: pod_controller_kind
            - action: replace
              source_labels: [__meta_kubernetes_pod_phase]
              target_label: pod_phase
              
            metric_relabel_configs:
            - action: drop
              source_labels: [__name__]
              regex: 'go_gc_duration_seconds.*'

          - job_name: 'kubernetes-service-endpoints'

            kubernetes_sd_configs:
            - role: endpoints

            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

            relabel_configs:
            # Example relabel to scrape only endpoints that have
            # "prometheus.io/scrape = true" annotation.
            #  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            #    action: keep
            #    regex: true
            #
            # Example relabel to customize metric path based on endpoints
            # "prometheus.io/metric_path = <metric path>" annotation.
            #  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_metric_path]
            #    action: replace
            #    target_label: __metrics_path__
            #    regex: (.+)
            #
            # Example relabel to scrape only single, desired port for the service based
            # on endpoints "prometheus.io/scrape_port = <port>" annotation.
            #  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_scrape_port]
            #    action: replace
            #    regex: ([^:]+)(?::\d+)?;(\d+)
            #    replacement: $1:$2
            #    target_label: __address__
            #
            # Example relabel to configure scrape scheme for all service scrape targets
            # based on endpoints "prometheus.io/scrape_scheme = <scheme>" annotation.
            #  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_scheme]
            #    action: replace
            #    target_label: __scheme__
            #    regex: (https?)
            #
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)      
            - action: replace
              source_labels: [__meta_kubernetes_namespace]
              target_label: Namespace
            - action: replace
              source_labels: [__meta_kubernetes_service_name]
              target_label: Service
            - action: replace
              source_labels: [__meta_kubernetes_pod_node_name]
              target_label: kubernetes_node
            - action: replace
              source_labels: [__meta_kubernetes_pod_name]
              target_label: pod_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_container_name]
              target_label: container_name

          - job_name: 'kubernetes-services'

            metrics_path: /probe
            params:
              module: [http_2xx]
            
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

            kubernetes_sd_configs:
            - role: service

            relabel_configs:
            # Example relabel to probe only some services that have "example.io/should_be_probed = true" annotation
            #  - source_labels: [__meta_kubernetes_service_annotation_example_io_should_be_probed]
            #    action: keep
            #    regex: true
            - source_labels: [__address__]
              target_label: __param_target
            - target_label: __address__
              replacement: blackbox-exporter-service:9115
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_service_name]
              target_label: kubernetes_name

          - job_name: 'kubernetes-ingresses'

            metrics_path: /probe
            params:
              module: [http_2xx]

            kubernetes_sd_configs:
            - role: ingress

            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

            relabel_configs:
            # Example relabel to probe only some ingresses that have "example.io/should_be_probed = true" annotation
            #  - source_labels: [__meta_kubernetes_ingress_annotation_example_io_should_be_probed]
            #    action: keep
            #    regex: true
            - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
              regex: (.+);(.+);(.+)
              replacement: ${1}://${2}${3}
              target_label: __param_target
            - target_label: __address__
              replacement: blackbox-exporter-service:9115
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_ingress_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_ingress_name]
              target_label: kubernetes_name

    exporters:
      prometheusremotewrite:
        endpoint: "https://aps-workspaces-gamma.us-east-1.amazonaws.com/workspaces/ws-7cd45747-2381-4a2a-847f-fa61a3694a74/api/v1/remote_write"
        namespace: test
        auth:
          region: "us-east-1"
          service: "aps"
      logging:
        loglevel: debug

    extensions:
      health_check:
      pprof:
        endpoint: :1888
      zpages:
        endpoint: :55679

    service:
      extensions: [pprof, zpages, health_check]
      pipelines:
        metrics:
          receivers: [prometheus]
          exporters: [logging, prometheusremotewrite]
---
# create otelcol service account and role binding
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otelcol-admin
  namespace: otelcol

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: otelcol-admin-role
rules:
  - apiGroups: [""]
    resources:
    - nodes
    - nodes/proxy
    - services
    - endpoints
    - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: otelcol-admin-role-binding
subjects:
  - kind: ServiceAccount
    name: otelcol-admin
    namespace: otelcol
roleRef:
  kind: ClusterRole
  name: otelcol-admin-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: otelcol
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  ports:
  - name: metrics # Default endpoint for querying metrics.
    port: 8888
  selector:
    component: otel-collector
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: otelcol
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  selector:
    matchLabels:
      app: opentelemetry
      component: otel-collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1 #TODO - adjust this to your own requirements
  template:
    metadata:
      labels:
        app: opentelemetry
        component: otel-collector
    spec:
      serviceAccountName: otelcol-admin
      containers:
      - command:
          - "/otelcol"
          - "--config=/conf/otel-collector-config.yaml"
#           Memory Ballast size should be max 1/3 to 1/2 of memory.
          - "--mem-ballast-size-mib=683"
        image: 822205079421.dkr.ecr.us-east-2.amazonaws.com/liujasn-intern-test:latest
        name: otel-collector
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 400Mi
        ports:
        - containerPort: 8888  # Default endpoint for querying metrics.
        volumeMounts:
        - name: otel-collector-config-vol
          mountPath: /conf
#        - name: otel-collector-secrets
#          mountPath: /secrets
        livenessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
        readinessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
      volumes:
        - configMap:
            name: otel-collector-conf
            items:
              - key: otel-collector-config
                path: otel-collector-config.yaml
          name: otel-collector-config-vol
#        - secret:
#            name: otel-collector-secrets
#            items:
#              - key: cert.pem
#                path: cert.pem
#              - key: key.pem
#                path: key.pem
---