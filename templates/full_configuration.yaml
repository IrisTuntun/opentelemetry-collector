---
# create otelcol namespace
apiVersion: v1
kind: Namespace
metadata:
  name: otelcol
  labels:
    name: otelcol

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  namespace: otelcol
  labels:
    app: opentelemetry
    component: otel-collector-conf
data:
  otel-collector-config: |
    receivers:
      prometheus:
        config:
          global:
            scrape_interval: 1m
            scrape_timeout: 10s

          scrape_configs:
          - job_name: 'kubernetes-pod-appmesh-envoy'
            sample_limit: 10000
            metrics_path: /stats/prometheus
            kubernetes_sd_configs:
            - role: pod
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_container_name]
              action: keep
              regex: '^envoy$$'
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $${1}:9901
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels: [__meta_kubernetes_namespace]
              target_label: Namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: pod_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_container_name]
              target_label: container_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_controller_name]
              target_label: pod_controller_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_controller_kind]
              target_label: pod_controller_kind
            - action: replace
              source_labels: [__meta_kubernetes_pod_phase]
              target_label: pod_phase
              
            # Exclude high cardinality metrics
            metric_relabel_configs:
            - source_labels: [ cluster_name ]
              regex: '(outbound|inbound|prometheus_stats).*'
              action: drop
            - source_labels: [ tcp_prefix ]
              regex: '(outbound|inbound|prometheus_stats).*'
              action: drop
            - source_labels: [ listener_address ]
              regex: '(.+)'
              action: drop
            - source_labels: [ http_conn_manager_listener_prefix ]
              regex: '(.+)'
              action: drop
            - source_labels: [ http_conn_manager_prefix ]
              regex: '(.+)'
              action: drop
            - source_labels: [ __name__ ]
              regex: 'envoy_tls.*'
              action: drop
            - source_labels: [ __name__ ]
              regex: 'envoy_tcp_downstream.*'
              action: drop
            - source_labels: [ __name__ ]
              regex: 'envoy_http_(stats|admin).*'
              action: drop
            - source_labels: [ __name__ ]
              regex: 'envoy_cluster_(lb|retry|bind|internal|max|original).*'
              action: drop

          - job_name: 'kubernetes-apiservers'
            sample_limit: 10000
            # Default to scraping over https. If required, just disable this or change to
            # `http`.
            scheme: https
            kubernetes_sd_configs:
            - role: endpoints
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
            - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
              action: keep
              regex: kubernetes;https

          - job_name: 'kubernetes-cadvisor'
            sample_limit: 10000
            # Default to scraping over https. If required, just disable this or change to
            # `http`.
            scheme: https
            metrics_path: /metrics/cadvisor
            kubernetes_sd_configs:
            - role: node
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)

            # Exclude high cardinality metrics
            metric_relabel_configs:
            - source_labels: [__name__]
              regex: (container|machine)_(cpu|memory|network|fs)_(.+)
              action: keep
            - source_labels: [__name__]
              regex: container_memory_failures_total
              action: drop

          - job_name: 'kubernetes-nodes'
            sample_limit: 10000
            # Default to scraping over https. If required, just disable this or change to
            # `http`.
            scheme: https
            kubernetes_sd_configs:
            - role: node
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)

          - job_name: 'kubernetes-pods'
            sample_limit: 10000
            kubernetes_sd_configs:
            - role: pod
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
            # Example relabel to scrape only endpoints that have
            # "prometheus.io/scrape = true" annotation.
            - action: keep
              regex: true
              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            # Example relabel to configure scrape scheme for all service scrape targets
            # based on endpoints "prometheus.io/scrape_scheme = <scheme>" annotation.
            - action: replace
              regex: (https?)
              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              target_label: __scheme__
            # Example relabel to customize metric path based on endpoints
            # "prometheus.io/metric_path = <metric path>" annotation.
            - action: replace
              regex: (.+)
              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              target_label: __metrics_path__
            # Example relabel to scrape only single, desired port for the service based
            # on endpoints "prometheus.io/scrape_port = <port>" annotation.
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels: [__meta_kubernetes_namespace]
              target_label: Namespace
            - action: replace
              source_labels: [__meta_kubernetes_pod_name]
              target_label: pod_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_container_name]
              target_label: container_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_controller_name]
              target_label: pod_controller_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_controller_kind]
              target_label: pod_controller_kind
            - action: replace
              source_labels: [__meta_kubernetes_pod_phase]
              target_label: pod_phase
              
            metric_relabel_configs:
            - action: drop
              source_labels: [__name__]
              regex: 'go_gc_duration_seconds.*'

          - job_name: 'kubernetes-service-endpoints'
            sample_limit: 10000
            kubernetes_sd_configs:
            - role: endpoints
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
            # Example relabel to scrape only endpoints that have
            # "prometheus.io/scrape = true" annotation.
            - action: keep
              regex: true
              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            # Example relabel to configure scrape scheme for all service scrape targets
            # based on endpoints "prometheus.io/scrape_scheme = <scheme>" annotation.
            - action: replace
              regex: (https?)
              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              target_label: __scheme__
            # Example relabel to customize metric path based on endpoints
            # "prometheus.io/metric_path = <metric path>" annotation.
            - action: replace
              regex: (.+)
              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              target_label: __metrics_path__
            # Example relabel to scrape only single, desired port for the service based
            # on endpoints "prometheus.io/scrape_port = <port>" annotation.
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)      
            - action: replace
              source_labels: [__meta_kubernetes_namespace]
              target_label: Namespace
            - action: replace
              source_labels: [__meta_kubernetes_service_name]
              target_label: Service
            - action: replace
              source_labels: [__meta_kubernetes_pod_node_name]
              target_label: kubernetes_node
            - action: replace
              source_labels: [__meta_kubernetes_pod_name]
              target_label: pod_name
            - action: replace
              source_labels: [__meta_kubernetes_pod_container_name]
              target_label: container_name

            # Exclude high cardinality metrics
            metric_relabel_configs:
            - source_labels: [__name__]
              regex: 'go_gc_duration_seconds.*'
              action: drop

          - job_name: 'kubernetes-services'
            sample_limit: 10000
            metrics_path: /probe
            params:
              module: [http_2xx]
            kubernetes_sd_configs:
            - role: service
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
            # Example relabel to probe only some services that have "prometheus.io/should_be_probed = true" annotation
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_should_be_probed]
              action: keep
              regex: true
            - source_labels: [__address__]
              target_label: __param_target
            - target_label: __address__
              replacement: blackbox-exporter-service:9115
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_service_name]
              target_label: kubernetes_name

          - job_name: 'kubernetes-ingresses'
            sample_limit: 10000
            metrics_path: /probe
            params:
              module: [http_2xx]
            kubernetes_sd_configs:
            - role: ingress
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
            # Example relabel to probe only some services that have "prometheus.io/should_be_probed = true" annotation
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_should_be_probed]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
              regex: (.+);(.+);(.+)
              replacement: $${1}://$${2}$${3}
              target_label: __param_target
            - target_label: __address__
              replacement: blackbox-exporter-service:9115
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_ingress_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_ingress_name]
              target_label: kubernetes_name

    exporters:
      prometheusremotewrite:
        endpoint: "endpoint"
        namespace: test
        auth:
          region: "us-east-1"
          service: "aps"
      logging:
        loglevel: debug

    extensions:
      health_check:
      pprof:
        endpoint: :1888
      zpages:
        endpoint: :55679

    service:
      extensions: [pprof, zpages, health_check]
      pipelines:
        metrics:
          receivers: [prometheus]
          exporters: [logging, prometheusremotewrite]
---
# create otelcol service account and role binding
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otelcol-admin
  namespace: otelcol

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: otelcol-admin-role-binding
subjects:
  - kind: ServiceAccount
    name: otelcol-admin
    namespace: otelcol
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: otelcol
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  ports:
  - name: metrics # Default endpoint for querying metrics.
    port: 8888
  selector:
    component: otel-collector
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: otelcol
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  selector:
    matchLabels:
      app: opentelemetry
      component: otel-collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1 #TODO - adjust this to your own requirements
  template:
    metadata:
      labels:
        app: opentelemetry
        component: otel-collector
    spec:
      serviceAccountName: otelcol-admin
      containers:
      - command:
          - "/otelcol"
          - "--config=/conf/otel-collector-config.yaml"
#           Memory Ballast size should be max 1/3 to 1/2 of memory.
          - "--mem-ballast-size-mib=683"
        image: 822205079421.dkr.ecr.us-east-2.amazonaws.com/liujasn-intern-test:latest
        name: otel-collector
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 400Mi
        ports:
        - containerPort: 8888  # Default endpoint for querying metrics.
        volumeMounts:
        - name: otel-collector-config-vol
          mountPath: /conf
#        - name: otel-collector-secrets
#          mountPath: /secrets
        livenessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
        readinessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
      volumes:
        - configMap:
            name: otel-collector-conf
            items:
              - key: otel-collector-config
                path: otel-collector-config.yaml
          name: otel-collector-config-vol
#        - secret:
#            name: otel-collector-secrets
#            items:
#              - key: cert.pem
#                path: cert.pem
#              - key: key.pem
#                path: key.pem
---